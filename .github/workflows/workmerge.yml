name: Node.js Test and Merge CI

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Installing node modules
        run: npm install

      - name: Testing the node modules
        run: npm test

  zipfile_compress:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v3

      - name: Compressing the project to the zip file
        run: zip -r webapp.zip .

      - name: Verifying whether we have zipped it
        run: ls -l

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with: 
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "latest"

      - name: Run packer init
        id: init
        run: "packer init ."

      - name: Run packer validate
        id: validate
        run: "packer validate -var-file=mainVariable.pkrvars.hcl ."

      - name: Run `packer build`
        id: build
        run: "packer build  -var-file=mainVariable.pkrvars.hcl -var 'sharedAmi=[${{secrets.sharedAmi}}]' ."

  Refresh_Autoscaling_Group:
    needs: zipfile_compress
    runs-on: ubuntu-latest

    steps:
      # - uses: actions/checkout@v3

      - name: Checking AWS Version
        run: "aws --version"

      - name: Configure AWS Credentials for dev account
        if: ${{ vars.ENV == 'dev' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # aws-region: us-east-1
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Configure AWS Credentials for prod account
        if: ${{ vars.ENV == 'prod' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # aws-region: us-east-1
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_2 }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_2 }}
          aws-region: us-east-1


      - name: Auto Refreshing the autoScalingGroup
        run: |
          export ami_id="$(aws ec2 describe-images \
            --owners ${{ secrets.OWNER_ID }} \
            --query 'sort_by(Images, &CreationDate)[-1].ImageId' \
            --output text)"

          export launch_template_id="$(aws ec2 describe-launch-templates \
            --query 'sort_by(LaunchTemplates, &CreateTime)[-1].LaunchTemplateId' \
          )"

          export launch_template_without_quotes=`sed -e 's/^"//' -e 's/"$//' <<<"$launch_template_id"`

          export auto_scaling_name="$(aws autoscaling describe-auto-scaling-groups \
            --query "AutoScalingGroups[0].AutoScalingGroupName" \
            --auto-scaling-group-name terraform_creation
          )"

          
          if ! [[ $launch_template_id == null ]] && ! [[ $auto_scaling_name == null ]]
          then

            echo "Inside if...."

            aws ec2 create-launch-template-version --launch-template-id $launch_template_without_quotes \
              --version-description Version2.0Template \
              --source-version 1 \
              --launch-template-data ImageId=$ami_id \
              --region us-east-1

            aws autoscaling start-instance-refresh \
            --auto-scaling-group-name terraform_creation
 
          else 

            echo "Inside else"

            exit 0


          fi
    
